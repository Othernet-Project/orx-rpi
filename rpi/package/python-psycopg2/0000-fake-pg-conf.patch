Normally, psycopg2 setup module tries to use pg_config executable in order to
configure the build. Since this executable is cross-compiled, it cannot be
executed during build. While Buildroot provides its own script that mocks
pg_config behavior, it is not sufficient to build psycopg2.

This patch completely removes the code that wraps pg_config, and instead adds
two command line arguments that can be used to pass in relevant iformation.
These are:

    --pg-version = postgres version
    --pg-prefix = actual prefix of the staging directory where postgres is
    installed.

diff --git a/setup.py b/setup.py
index 975fe10..fa27cd0 100644
--- a/setup.py
+++ b/setup.py
@@ -93,129 +93,6 @@ version_flags   = ['dt', 'dec']
 PLATFORM_IS_WINDOWS = sys.platform.lower().startswith('win')
 
 
-class PostgresConfig:
-    def __init__(self, build_ext):
-        self.build_ext = build_ext
-        self.pg_config_exe = self.build_ext.pg_config
-        if not self.pg_config_exe:
-            self.pg_config_exe = self.autodetect_pg_config_path()
-        if self.pg_config_exe is None:
-            sys.stderr.write("""\
-Error: pg_config executable not found.
-
-Please add the directory containing pg_config to the PATH
-or specify the full executable path with the option:
-
-    python setup.py build_ext --pg-config /path/to/pg_config build ...
-
-or with the pg_config option in 'setup.cfg'.
-""")
-            sys.exit(1)
-
-    def query(self, attr_name):
-        """Spawn the pg_config executable, querying for the given config
-        name, and return the printed value, sanitized. """
-        try:
-            pg_config_process = subprocess.Popen(
-                [self.pg_config_exe, "--" + attr_name],
-                stdin=subprocess.PIPE,
-                stdout=subprocess.PIPE,
-                stderr=subprocess.PIPE)
-        except OSError:
-            raise Warning("Unable to find 'pg_config' file in '%s'" %
-                          self.pg_config_exe)
-        pg_config_process.stdin.close()
-        result = pg_config_process.stdout.readline().strip()
-        if not result:
-            raise Warning(pg_config_process.stderr.readline())
-        if not isinstance(result, str):
-            result = result.decode('ascii')
-        return result
-
-    def find_on_path(self, exename, path_directories=None):
-        if not path_directories:
-            path_directories = os.environ['PATH'].split(os.pathsep)
-        for dir_name in path_directories:
-            fullpath = os.path.join(dir_name, exename)
-            if os.path.isfile(fullpath):
-                return fullpath
-        return None
-
-    def autodetect_pg_config_path(self):
-        """Find and return the path to the pg_config executable."""
-        if PLATFORM_IS_WINDOWS:
-            return self.autodetect_pg_config_path_windows()
-        else:
-            return self.find_on_path('pg_config')
-
-    def autodetect_pg_config_path_windows(self):
-        """Attempt several different ways of finding the pg_config
-        executable on Windows, and return its full path, if found."""
-
-        # This code only runs if they have not specified a pg_config option
-        # in the config file or via the commandline.
-
-        # First, check for pg_config.exe on the PATH, and use that if found.
-        pg_config_exe = self.find_on_path('pg_config.exe')
-        if pg_config_exe:
-            return pg_config_exe
-
-        # Now, try looking in the Windows Registry to find a PostgreSQL
-        # installation, and infer the path from that.
-        pg_config_exe = self._get_pg_config_from_registry()
-        if pg_config_exe:
-            return pg_config_exe
-
-        return None
-
-    def _get_pg_config_from_registry(self):
-        try:
-            import winreg
-        except ImportError:
-            import _winreg as winreg
-
-        reg = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)
-        try:
-            pg_inst_list_key = winreg.OpenKey(reg,
-                'SOFTWARE\\PostgreSQL\\Installations')
-        except EnvironmentError:
-            # No PostgreSQL installation, as best as we can tell.
-            return None
-
-        try:
-            # Determine the name of the first subkey, if any:
-            try:
-                first_sub_key_name = winreg.EnumKey(pg_inst_list_key, 0)
-            except EnvironmentError:
-                return None
-
-            pg_first_inst_key = winreg.OpenKey(reg,
-                'SOFTWARE\\PostgreSQL\\Installations\\'
-                + first_sub_key_name)
-            try:
-                pg_inst_base_dir = winreg.QueryValueEx(
-                    pg_first_inst_key, 'Base Directory')[0]
-            finally:
-                winreg.CloseKey(pg_first_inst_key)
-
-        finally:
-            winreg.CloseKey(pg_inst_list_key)
-
-        pg_config_path = os.path.join(
-            pg_inst_base_dir, 'bin', 'pg_config.exe')
-        if not os.path.exists(pg_config_path):
-            return None
-
-        # Support unicode paths, if this version of Python provides the
-        # necessary infrastructure:
-        if sys.version_info[0] < 3 \
-        and hasattr(sys, 'getfilesystemencoding'):
-            pg_config_path = pg_config_path.encode(
-                sys.getfilesystemencoding())
-
-        return pg_config_path
-
-
 class psycopg_build_ext(build_ext):
     """Conditionally complement the setup.cfg options file.
 
@@ -230,8 +107,10 @@ class psycopg_build_ext(build_ext):
     user_options.extend([
         ('use-pydatetime', None,
          "Use Python datatime objects for date and time representation."),
-        ('pg-config=', None,
-          "The name of the pg_config binary and/or full path to find it"),
+        ('pg-version=', None,
+         "Postgres version"),
+        ('pg-prefix=', None,
+         "Buildroot staging directory prefix prefix"),
         ('have-ssl', None,
          "Compile with OpenSSL built PostgreSQL libraries (Windows only)."),
         ('static-libpq', None,
@@ -252,7 +131,8 @@ class psycopg_build_ext(build_ext):
         self.use_pydatetime = 1
         self.have_ssl = have_ssl
         self.static_libpq = static_libpq
-        self.pg_config = None
+        self.pg_version = None
+        self.pg_prefix = None
 
     def compiler_is_msvc(self):
         return self.get_compiler_name().lower().startswith('msvc')
@@ -376,29 +256,23 @@ class psycopg_build_ext(build_ext):
     def finalize_options(self):
         """Complete the build system configuration."""
         build_ext.finalize_options(self)
-
-        pg_config_helper = PostgresConfig(self)
-
         self.include_dirs.append(".")
         if self.static_libpq:
             if not getattr(self, 'link_objects', None):
                 self.link_objects = []
             self.link_objects.append(
-                    os.path.join(pg_config_helper.query("libdir"), "libpq.a"))
+                    os.path.join(self.pg_prefix, "lib/libpq.a"))
         else:
             self.libraries.append("pq")
 
         try:
-            self.library_dirs.append(pg_config_helper.query("libdir"))
-            self.include_dirs.append(pg_config_helper.query("includedir"))
-            self.include_dirs.append(pg_config_helper.query("includedir-server"))
-            try:
-                # Here we take a conservative approach: we suppose that
-                # *at least* PostgreSQL 7.4 is available (this is the only
-                # 7.x series supported by psycopg 2)
-                pgversion = pg_config_helper.query("version").split()[1]
-            except:
-                pgversion = "7.4.0"
+            self.library_dirs.append(os.path.join(self.pg_prefix, 'lib'))
+            self.include_dirs.append(os.path.join(self.pg_prefix, 'include'))
+
+            # Here we take a conservative approach: we suppose that
+            # *at least* PostgreSQL 7.4 is available (this is the only
+            # 7.x series supported by psycopg 2)
+            pgversion = self.pg_version or "7.4.0"
 
             verre = re.compile(
                 r"(\d+)\.(\d+)(?:(?:\.(\d+))|(devel|(alpha|beta|rc)\d+))")
