#!/bin/sh

DEVNAME=mmcblk0
SDCARD=/dev/${DEVNAME}
BOOT_PART=${SDCARD}p1
CONF_PART=${SDCARD}p2
LOG_PART=${SDCARD}p3
DATA_PART=${SDCARD}p4
DATA_DIR=/mnt/data
CONF_PART_SIZE=16M
LOG_PART_SIZE=40M
CONF_DIR=/mnt/persist
SETUP_LOG=/tmp/setup

PERSISTENT="/etc/shadow
/etc/group
/etc/profile
/etc/hostapd.conf
/etc/dnsmasq.conf
/etc/librarian-user.ini
/etc/ondd.conf
/etc/fstab
/etc/sudoers
/etc/profile
/etc/dropbear
/etc/network"

# Old stuff
BASE=/mnt/data/downloads
FILES=${BASE}/files
CONTENT=${BASE}/content
CACHE=${BASE}/.cache

log() {
    msg=$1
    echo "[$(date)] $1" >> $SETUP_LOG
}

relpath() {
    path=$1
    par=$2
    echo ${path##$par/}
}

migrate_legacy() {
    if [ -d "$CACHE" ]; then
        rm -rf "$CACHE"
        log "Removed cache dir"
    fi
    if [ -d  "$CONTENT" ]; then
        rm -rf "$CONTENT"
        log "Removed content dir"
    fi
    if [ -d "$FILES" ]; then
        mv "$FILES"/* "$BASE"/
        rm -rf "$FILES"
        log "Migrated files dir"
    fi
}

mkparts() {
    # Wait for the device to appear
    maxtries=3
    until [ -b $BOOT_PART ]
    do
        log "Waiting for SD card root partition to appear at $BOOT_PART"
        sleep 2
        maxtries=$(($maxtries - 1))
        if [ $maxtries -lt 1 ]
        then
            log "No SD card found"
            return 1
        fi
    done
    if [ -b $DATA_PART ]
    then
        log "Data partition $DATA_PART already initialized"
        return 2
    else
        log "No data partition found on $DATA_PART, continuing with setup"
    fi
    log "Unmounting boot partition if mounted"
    umount $BOOT_PART 2>&1 >> $SETUP_LOG
    # Partition and format the card
    log "Preparing the SD card"
    fdisk $SDCARD <<EOF >> $SETUP_LOG
n
p
2

+$CONF_PART_SIZE
n
p
3

+$LOG_PART_SIZE
n
p


w
EOF
    log "Reloading partition table"
    hdparm -z $SDCARD 2>&1 >> $SETUP_LOG || return 1
    log "Formatting the newly created partitions"
    mkfs.ext4 $CONF_PART 2>&1 >> $SETUP_LOG || return 1
    mkfs.ext4 $LOG_PART 2>&1 >> $SETUP_LOG || return 1
    mkfs.ext4 $DATA_PART 2>&1 >> $SETUP_LOG || return 1
    return 0
}

persist() {
    log "Setting up persistent configuration"
    for path in $PERSISTENT
    do
        relp=$(relpath "$path" /etc)
        target="$CONF_DIR/$relp"
        target_dir=$(dirname "$target")
        if ! [ -e "$target" ]
        then
            mkdir -p "$target_dir"
            log "Copying $path -> $target"
            # If it's a regular file, we copy it as is
            if [ -f "$c" ]
            then
                cp -a "$path" "$target"
            else
                cp -R "$path" "$target"
            fi
        fi
        log "Removing $path"
        rm -rf "$path"
        ln -s "$target" "$path"
        log "Linked $target -> $path"
    done
    # Make sure there's no shadow+ file in the persistent storage as this can 
    # sometimes happen when power is lost right after setting a password and 
    # subsequently disable setting passwords.
    rm "$CONF_DIR/shadow+"
}

case "$1" in
    start)
        echo -n "Starting preparation: "
        mkparts
        case $? in
            0)
                log "Mounting the created partitions"
                mount -a || (echo FAIL && exit 1)
                log "Preparing the directories"
                mkdir -p /mnt/data/downloads
                mkdir -p /mnt/data/fsal
                mkdir -p /mnt/data/librarian
                echo OK
                ;;
            1)
                echo FAIL
                exit 1
                ;;
            2)
                echo SKIPPED
                ;;
        esac
        persist
        migrate_legacy
        cp $SETUP_LOG /var/log/
        ;;
    *)
        echo "Usage: $0 {start}"
        exit 1
        ;;
esac

exit 0
