#!/usr/bin/python2

import os
import sys
import time
import syslog
from contextlib import contextmanager
from subprocess import call

from fsal.client import FSAL
from ondd_ipc.ipc import ONDDClient

import mount

# General
DEBUG = True
CP = '/bin/cp'
MV = '/bin/mv'
RM = '/bin/rm'
LOCALE = 'en_US.UTF-8'
ONDD_SOCKET_PATH = '/var/run/ondd.ctrl'
FSAL_SOCKET_PATH = '/var/run/fsal.ctrl'

# Filesystems and mounting
MOUNT_BASE = '/mnt'
MAIN_STORAGE = '{}/data/downloads'.format(MOUNT_BASE)
EXT_STORAGE = '{}/external'.format(MOUNT_BASE)
CHECK_PROGS = {
    'ext2': '/usr/sbin/fsck.ext2',
    'ext3': '/usr/sbin/fsck.ext3',
    'ext4': '/usr/sbin/fsck.ext4',
    'vfat': '/sbin/fsck.fat',
}
DEFAULT_MOUNT_OPTS = 'defaults'
MOUNT_OPTS = {
    'ntfs': 'windows_names,fmask=133,dmask=022,recover',
    'vfat': 'utf8',
}


def log_err(msg):
    syslog.syslog(syslog.LOG_ERR, msg)


def log_info(msg):
    syslog.syslog(msg)


def log_dbg(msg):
    if not DEBUG:
        return
    syslog.syslog(syslog.LOG_DEBUG, msg)


def log_warn(msg):
    syslog.syslog(syslog.LOG_WARNING, msg)


def get_mountpoint(devname):
    for entry in mount.get_mtab():
        if entry.dev == devname:
            return entry.mdir
    return ''


def get_mount_opts(fs, extra_opts=None):
    opts = MOUNT_OPTS.get(fs, DEFAULT_MOUNT_OPTS)
    if extra_opts:
        opts += ',' + extra_opts
    return opts


def mpath(devname):
    devname = devname.split('/')[-1]
    return os.path.join(MOUNT_BASE, devname)


def check_fs(dev, fstype):
    check_cmd = CHECK_PROGS.get(fstype)
    if not check_cmd:
        log_warn('Checking this filesystem is not supported')
        return
    log_dbg('Checking filesystem using {}'.format(check_cmd))
    if call([check_cmd, '-p', dev]) != 0:
        log_warn('Filesystem may have errors that could not be fixed')


@contextmanager
def autoumount(devname):
    try:
        yield
    except Exception as e:
        mount.umount(devname)
        # Entering error state
        log_err('ERROR: {}'.format(e))
        sys.exit(1)


def switch_storage(path):
    log_dbg('Switching ONDD output to {}'.format(path))
    ondd_client = ONDDClient(ONDD_SOCKET_PATH)
    response = ondd_client.set_output_path(path)
    if response != '204':
        log_dbg('ONDD output switch failed. Not critical, continuing.')
    log_dbg('Refreshing FSAL index')
    fsal_client = FSAL(FSAL_SOCKET_PATH)
    fsal_client.refresh()
    log_dbg('Finished switching storage device')


def use_ext(devname, mdir, fs):
    log_info('Using {} as external storage'.format(devname))

    # Also make sure nothing else is mounted there
    mount.umount(EXT_STORAGE)

    # Finally mount the data dir
    mount.umount(devname)
    ret = mount.mount(devname, EXT_STORAGE, fs=fs,
                      opts=MOUNT_OPTS.get(fs, DEFAULT_MOUNT_OPTS))
    if ret != 0:
        raise RuntimeError('Failed to remount as data storage')

    log_dbg('Switching active storage to {}'.format(EXT_STORAGE))
    try:
        switch_storage(EXT_STORAGE)
    except RuntimeError:
        log_err('Failed to switch storage path')


def handle_storage(devname, fs):
    # First mount the partition
    mdir = get_mountpoint(devname)
    if not mdir:
        # First check the filesystem
        check_fs(devname, fs)
        mdir = mpath(devname)
        log_dbg('Mounting {} -> {}'.format(devname, mdir))
        ret = mount.mount(devname, mdir, fs, opts=get_mount_opts(fs))
        if ret != 0:
            raise RuntimeError('Failed to mount the partition')

    log_info('{} mounted at {}'.format(devname, mdir))

    log_dbg('Processing external storage')
    time.sleep(3)
    use_ext(devname, mdir, fs)


def handle_storage_removal(dev):
    mdir = get_mountpoint(dev)
    if mdir == EXT_STORAGE:
        log_dbg('Switching storage to internal storage')
        try:
            switch_storage(MAIN_STORAGE)
        except RuntimeError:
            log_err('Failed to switch output path')
    log_dbg('Unmounting {}'.format(mdir))
    if mount.umount(mdir, force=True) != 0:
        log_err('Failed to unmount {}'.format(dev))


def main():
    # Set locale environment variable. Since this is a udev script, it has no
    # access to environment variables other than device-specific ones as
    # defined by udev. This means that locale is messed up for any process
    # started by this script, including all processed started by
    # ``subprocess.call`` and similar methods.
    os.putenv('LANG', LOCALE)

    # Get basic data from the environment
    devname = os.environ.get('DEVNAME')

    syslog.openlog('hotplug.{}'.format(devname.split('/')[-1]))

    fs = os.environ.get('ID_FS_TYPE')
    action = os.environ.get('ACTION')

    # Obtain device object and pass it to handler
    with autoumount(devname):
        if action == 'add':
            handle_storage(devname, fs)
        else:
            handle_storage_removal(devname)


if __name__ == '__main__':
    main()
