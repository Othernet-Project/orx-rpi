
class LedClass(object):
    """
    Wrapper for LED class. This class allows the user to control LED class
    devices using the /sys paths.
    """
    LED_CLASS = '/sys/class/leds/'
    TRIGGER = 'trigger'
    DELAY_ON = 'delay_on'
    DELAY_OFF = 'delay_off'
    BRIGHTNESS = 'brightness'

    #: No trigger
    TR_NONE = 'none'
    #: Unknown
    TR_NAND = 'nand-disk'
    #: Timer mode (use delay on and delay off values to control blinking speed)
    TR_TIMER = 'timer'
    #: Unknown
    TR_SD = 'sd'
    #: Unknown
    TR_SDIO = 'sdio'

    #: Valid trigger values
    TRIGGERS = (TR_NONE, TR_NAND, TR_TIMER, TR_SD, TR_SDIO)

    def __init__(self, name):
        self.name = name
        self.path = self.LED_CLASS + name

    def _write_sysfs(self, node, value, name):
        path = self.path + '/' + node
        try:
            with open(path, 'w') as f:
                f.write(str(value))
        except (IOError, ValueError):
            raise ValueError('Invalid value for {}: {}'.format(name, value))

    def _read_sysfs(self, node):
        path = self.path + '/' + node
        with open(path, 'r') as f:
            value = f.read()
        return value

    @property
    def trigger(self):
        return self._read_sysfs(self.TRIGGER)

    @trigger.setter
    def trigger(self, value):
        if value not in self.TRIGGERS:
            raise ValueErorr('Invalid value for trigger: {}'.format(value))
        self._write_sysfs(self.TRIGGER, value, 'trigger')

    @property
    def brightness(self):
        return self._read_sysfs(self.BRIGHTNESS)

    @brightness.setter
    def brightness(self, value):
        self._write_sysfs(self.BRIGHTNESS, value, 'brightness')

    @property
    def delay_on(self):
        return self._read_sysfs(self.DELAY_ON)

    @delay_on.setter
    def delay_on(self, value):
        self._write_sysfs(self.DELAY_ON, value, 'delay on')

    @property
    def delay_off(self):
        return self._read_sysfs(self.DELAY_OFF)

    @delay_off.setter
    def delay_off(self, value):
        self._write_sysfs(self.DELAY_OFF, value, 'delay off')

    def off(self):
        self.brightness = 0

    def on(self):
        self.trigger = self.TR_NONE
        self.brightness = 1

    def blink(self, interval=100):
        self.trigger = self.TR_TIMER
        self.delay_on = interval
        self.delay_off = interval
        self.brightness = 1

    def blink_irregular(self, on_interval=200, off_interval=500):
        self.trigger = self.TR_TIMER
        self.delay_on = on_interval
        self.delay_off = off_interval
        self.brightness = 1

